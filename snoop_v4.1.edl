PROJECT (
	PREAMBLE (
		NAME "snoop_cache"
		VERSION 4.1
		DESCRIPTION "Snoopy Cache with Write-Through / Write-Invalidate / No-Write-Allocate Protocol"
		 )
	PARAMLIB (

-- Struct for holding memory request traces in a processor and the processor-cache link

	STRUCT (t_mem_trace, [RSTRING (instr,"-",5),
				   			RINT (addr,0),
							RINT(data,0)]);	

	STRUCT (t_cache_state, [RSTRING (instr,"-",5),
				   			RINT (addr,0)]);

          LINK (proc_link_o, [(PROC_PKT_O, RSTRUCT(t_mem_trace, DP))]);
          LINK (proc_link_i, [(PROC_PKT_I, RINT(data, 0))]);

-- Struct for holding cache lines

	STRUCT (t_cache_struct, [RINT (valid, 0),
			       RINT (address, 0),
			       RINT (data0, 0),
			       RINT (data1, 0),
			       RINT (data2, 0),
			       RINT (data3, 0) ]);

-- Struct definitions for a bus packets and associated link params

		STRUCT (t_read_mem, [RSTRING (instr, "-",5), 		-- read request to memory
                                				 RINT (addr, 0),
							 RINT (source, 0)]);

  		STRUCT (t_write_mem, [RSTRING (instr, "-",5), 		-- write request to memory
                                				     RINT (addr, 0),
							     RINT (data, 0),
							     RINT (source, 0)]);

		STRUCT (t_read_reply, [RSTRING (instr, "-",5), 		-- read response from memory
							     RINT (data0, 0),
							     RINT (data1, 0),
							     RINT (data2, 0),
							     RINT (data3, 0),
							     RINT (source, 0)]);

		STRUCT (t_write_reply, [RSTRING (instr, "-",5), 		-- write response from memory
							     RINT (source, 0)]);


              LINK   (bus_link, [(READ_MEM_PKT, RSTRUCT (t_read_mem, DP)),
					(WRITE_MEM_PKT, RSTRUCT (t_write_mem, DP)),
					(READ_REPLY_PKT, RSTRUCT (t_read_reply, DP)),
					(WRITE_REPLY_PKT, RSTRUCT (t_write_reply, DP)) ]);

-- Struct for the data in memory:

	STRUCT (t_mem_struct, [  RINT (data0,0),
						RINT (data1,0),
						RINT (data2,0),
						RINT (data3,0) ]);

        LINK (data_link, [(DATA_PKT, RSTRUCT(t_mem_struct, DP))]);


-- Definition of integer arrays, for parameter values.

	ARRAY (mem_array, t_mem_struct);
	ARRAY (cache_array, t_cache_struct);
	ARRAY (memory_trace, t_mem_trace);

)
	GLOBALS (
		 RINT (Max_Time_Left, 5000)
		 RINT (nodes_done, 0)
--	node_done is decremented by a cache when that cache receives a
--	packet from its processor and incremented when the actions that
--	this causes have finished. It is incremented by each processor
--	when the processor reads an input which is not r, R, w, or W.
--	The bus checks nodes_done and stops the simulation when it
--	reaches 4.
	)
	ENTITYLIB (

		ABSTRACT Biclocked sync ( )
		ENTITY Clock sync ( )
		ENTITY Clockphase sync ( )


	ENTITY bus (
		EXTENDS (Biclocked)
		DESCRIPTION ("Bus")
		STATES (NORMAL)
		PARAMS ( )
	  	PORTS (
		XPORT(5, input,bus_link,DESTINATION);
		XPORT(5, output,bus_link,SOURCE);
	  )
	);

		ENTITY memory (
		EXTENDS (Biclocked)
			DESCRIPTION("Memory")
			STATES (MEMORY_IDLE, MEMORY_BUSY)
			PARAMS (
				RARRAY (mem_array, data_mem, 1024);
			)
			PORTS (
				PORT (to_bus, bus_link, SOURCE);
				PORT (from_bus, bus_link, DESTINATION);
		)
			ATTRIB ()
		);

		ENTITY cache (
		EXTENDS (Biclocked)
			DESCRIPTION("cache1")
			STATES (CACHE_IDLE, CACHE_BUSY, BUS_MAST, CACHE_INV)
			PARAMS (
                                RSTRING (Status,"__",5);
				RINT(Address, 0);
				RARRAY (cache_array, cache_mem, 256);
				RINT (Cache_size, 8);
			)
			PORTS (
				PORT (to_proc, proc_link_i, SOURCE);
				PORT (from_proc, proc_link_o, DESTINATION);
				PORT (to_bus, bus_link, SOURCE);
				PORT (from_bus, bus_link, DESTINATION);
			)
			ATTRIB ()
		);
		ENTITY proc (
		EXTENDS (Biclocked)
			DESCRIPTION ("Processor1")
			STATES (PROC_IDLE, PROC_BUSY)
		        PARAMS (
				RARRAY (memory_trace, mem_trace, 1024);
				RSTRUCT (t_mem_trace, current_line);
			)
			PORTS  (
				PORT (to_cache, proc_link_o, SOURCE);
				PORT (from_cache, proc_link_i, DESTINATION);
			)
			ATTRIB ()	
		);

	)
	STRUCTURE (

		AENTITY bus BUS (DESCRIPTION ("interconnection bus")
			ATTRIB ( XPORT (input, 5) 
				 XPORT (output, 5) )
		);
		AENTITY memory MEMORY  (DESCRIPTION ("Memory"));
		AENTITY cache CACHE1 (DESCRIPTION ("Cache 1")	);
		AENTITY cache CACHE2 (DESCRIPTION ("Cache 2")	);
		AENTITY cache CACHE3 (DESCRIPTION ("Cache 3")	);
		AENTITY cache CACHE4 (DESCRIPTION ("Cache 4")	);
		AENTITY proc PROC1 (DESCRIPTION ("Processor 1"));
		AENTITY proc PROC2 (DESCRIPTION ("Processor 2"));
		AENTITY proc PROC3 (DESCRIPTION ("Processor 3"));
		AENTITY proc PROC4 (DESCRIPTION ("Processor 4"));
		AENTITY Clock CLOCK ( DESCRIPTION ("Clock"));
		AENTITY Clockphase CPHASE (DESCRIPTION ("Clock display"));

	CLINK (proc.PROC1[to_cache]->cache.CACHE1[from_proc],1);
	CLINK (proc.PROC2[to_cache]->cache.CACHE2[from_proc],1);
	CLINK (proc.PROC3[to_cache]->cache.CACHE3[from_proc],1);
	CLINK (proc.PROC4[to_cache]->cache.CACHE4[from_proc],1);

	CLINK (cache.CACHE1[to_proc]->proc.PROC1[from_cache],1)
	CLINK (cache.CACHE2[to_proc]->proc.PROC2[from_cache],1)
	CLINK (cache.CACHE3[to_proc]->proc.PROC3[from_cache],1)
	CLINK (cache.CACHE4[to_proc]->proc.PROC4[from_cache],1)


	CLINK (cache.CACHE1[to_bus]->bus.BUS[input1],1);
	CLINK (cache.CACHE2[to_bus]->bus.BUS[input2],1);
	CLINK (cache.CACHE3[to_bus]->bus.BUS[input3],1);
	CLINK (cache.CACHE4[to_bus]->bus.BUS[input4],1);

	
	CLINK (bus.BUS[output1]->cache.CACHE1[from_bus],1);
	CLINK (bus.BUS[output2]->cache.CACHE2[from_bus],1);
	CLINK (bus.BUS[output3]->cache.CACHE3[from_bus],1);
	CLINK (bus.BUS[output4]->cache.CACHE4[from_bus],1);

	CLINK (bus.BUS[output0]->memory.MEMORY[from_bus],1);
	CLINK (memory.MEMORY[to_bus]->bus.BUS[input0],1);

	)
)
